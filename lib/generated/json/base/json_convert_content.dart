// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:thats_montreal/model/spot_types_entity.dart';
import 'package:thats_montreal/generated/json/spot_types_entity_helper.dart';
import 'package:thats_montreal/model/video_data_entity.dart';
import 'package:thats_montreal/generated/json/video_data_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case SpotTypesData:
				return spotTypesDataFromJson(data as SpotTypesData, json) as T;
			case SpotTypesDataType:
				return spotTypesDataTypeFromJson(data as SpotTypesDataType, json) as T;
			case VideoDataEntity:
				return videoDataEntityFromJson(data as VideoDataEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case SpotTypesData:
				return spotTypesDataToJson(data as SpotTypesData);
			case SpotTypesDataType:
				return spotTypesDataTypeToJson(data as SpotTypesDataType);
			case VideoDataEntity:
				return videoDataEntityToJson(data as VideoDataEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (SpotTypesData).toString()){
			return SpotTypesData().fromJson(json);
		}	else if(type == (SpotTypesDataType).toString()){
			return SpotTypesDataType().fromJson(json);
		}	else if(type == (VideoDataEntity).toString()){
			return VideoDataEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<SpotTypesData>() is M){
			return data.map<SpotTypesData>((e) => SpotTypesData().fromJson(e)).toList() as M;
		}	else if(List<SpotTypesDataType>() is M){
			return data.map<SpotTypesDataType>((e) => SpotTypesDataType().fromJson(e)).toList() as M;
		}	else if(List<VideoDataEntity>() is M){
			return data.map<VideoDataEntity>((e) => VideoDataEntity().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}